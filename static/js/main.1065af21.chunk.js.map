{"version":3,"sources":["components/InputField.js","App.js","reportWebVitals.js","index.js"],"names":["InputField","forwardRef","props","ref","React","useState","value","setValue","error","setError","useImperativeHandle","validate","validation","rules","split","i","length","current","pair","className","label","type","placeholder","name","onChange","event","target","handleChange","autoComplete","defaultProps","App","inputRefs","useRef","createRef","setData","prev","onSubmit","e","preventDefault","isValid","valid","console","log","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0PAGMA,EAAaC,sBAAW,SAACC,EAAOC,GAAQ,MAKlBC,IAAMC,SAAS,IALG,mBAKrCC,EALqC,KAK9BC,EAL8B,OAMlBH,IAAMC,SAAS,IANG,mBAMrCG,EANqC,KAM9BC,EAN8B,KAsD5C,OALAC,8BAAoBP,GAAK,WACvB,MAAO,CACLQ,SAAU,kBAvCG,WAIb,GAAIT,EAAMU,WAGR,IAFA,IAAMC,EAAQX,EAAMU,WAAWE,MAAM,KAE3BC,EAAI,EAAGA,EAAIF,EAAMG,OAAQD,IAAI,CACrC,IAAME,EAAUJ,EAAME,GAEtB,GAAgB,aAAZE,IACGX,EAEH,OADAG,EAAS,0BACF,EAGX,IAAMS,EAAOD,EAAQH,MAAM,KAC3B,OAAQI,EAAK,IACT,IAAK,MACL,GAAIZ,EAAMU,OAASE,EAAK,GAEtB,OADAT,EAAS,+BAAD,OAAgCS,EAAK,GAArC,uBACD,EAET,MACA,IAAK,MACL,GAAIZ,EAAMU,OAAQE,EAAK,GAErB,OADAT,EAAS,qCAAD,OAAsCS,EAAK,GAA3C,uBACD,GAOf,OAAO,EAKOP,QAIlB,sBAAKQ,UAAU,gBAAf,UACGjB,EAAMkB,OAAS,gCAAQlB,EAAMkB,QAC9B,uBACEC,KAAMnB,EAAMmB,KACZC,YAAapB,EAAMoB,YACnBC,KAAMrB,EAAMqB,KACZC,SAAU,SAACC,GAAD,OAtDK,SAACA,GACpBlB,EAASkB,EAAMC,OAAOpB,OACtBG,EAAS,IACTP,EAAMsB,SAASC,EAAMC,OAAOH,KAAME,EAAMC,OAAOpB,OAmDtBqB,CAAaF,IAClCnB,MAAOJ,EAAMI,MAAQJ,EAAMI,MAAQA,EACnCsB,aAAc1B,EAAM0B,eAErBpB,GACC,mBAAGW,UAAU,QAAb,SAAsBX,UAK9BR,EAAW6B,aAAe,CACxBP,YAAa,GACbC,KAAM,GACNF,KAAM,GACNf,MAAO,GACPsB,aAAc,MACdhB,WAAW,IAGEZ,QCvBA8B,MAlDf,WACE,IAAMC,EAAY3B,IAAM4B,OAAO,CAAC5B,IAAM6B,cADzB,EAGW5B,mBAAS,IAHpB,mBAGA6B,GAHA,WAIPP,EAAe,SAACJ,EAAMjB,GAC1B4B,GAAQ,SAACC,GAAD,mBAAC,eAAeA,GAAhB,kBAAuBZ,EAAOjB,QAqBxC,OACE,qBAAKa,UAAU,MAAf,SACE,uBAAMiB,SApBS,SAACC,GAClBA,EAAEC,iBAGF,IADA,IAAIC,GAAU,EACLxB,EAAI,EAAGA,EAAIgB,EAAUd,QAAQD,OAAQD,IAAK,CACjD,IAAMyB,EAAQT,EAAUd,QAAQF,GAAGE,QAAQN,WAC3C8B,QAAQC,IAAIF,GACPA,IACHD,GAAU,GAITA,GAGHE,QAAQC,IAAI,eAKgBvB,UAAU,OAAtC,UACE,gEACA,cAAC,EAAD,CACEhB,IAAK4B,EAAUd,QAAQ,GACvBM,KAAK,WACLH,MAAM,YACNI,SAAUG,EACVf,WAAY,0BAGd,cAAC,EAAD,CACET,IAAK4B,EAAUd,QAAQ,GACvBM,KAAK,WACLH,MAAM,YACNI,SAAUG,IAEZ,wBAAQN,KAAK,SAAb,0BC1COsB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.1065af21.chunk.js","sourcesContent":["import React, { forwardRef, useImperativeHandle } from \"react\";\r\nimport { useState } from \"react\";\r\n\r\nconst InputField = forwardRef((props, ref) => {\r\n  // \"required|min:6|max:12\"\r\n\r\n  //State to deal with the input filed\r\n\r\n  const [value, setValue] = React.useState(\"\");\r\n  const [error, setError] = React.useState(\"\");\r\n  const handleChange = (event) => {\r\n    setValue(event.target.value);\r\n    setError(\"\")\r\n    props.onChange(event.target.name, event.target.value);\r\n  };\r\n  const validate = () => {\r\n   // return true if is valid\r\n   //else return false\r\n\r\n      if (props.validation){\r\n        const rules = props.validation.split(\"|\");\r\n\r\n        for ( let i = 0; i < rules.length; i++){\r\n          const current = rules[i];\r\n\r\n          if (current === 'required'){\r\n            if (!value ){\r\n              setError(\"This fiel is required\")\r\n              return false;\r\n            }\r\n          }\r\n          const pair = current.split(\":\")\r\n          switch (pair[0]){\r\n              case 'min': \r\n              if (value.length < pair[1]){\r\n                setError(`This field must be at least ${pair[1]} characters long!`)\r\n                return false;\r\n              }\r\n              break;\r\n              case 'max':\r\n              if (value.length> pair[1]){\r\n                setError(`This field must be no longer than ${pair[1]} characters long!`)\r\n                return false;\r\n              }\r\n              break; \r\n              default: break;\r\n          }\r\n        }\r\n      }\r\n        return true;\r\n  };\r\n\r\n  useImperativeHandle(ref, () => {\r\n    return {\r\n      validate: () => validate(),\r\n    };\r\n  });\r\n  return (\r\n    <div className=\"input-wrapper\">\r\n      {props.label && <label>{props.label}</label>}\r\n      <input\r\n        type={props.type}\r\n        placeholder={props.placeholder}\r\n        name={props.name}\r\n        onChange={(event) => handleChange(event)}\r\n        value={props.value ? props.value : value}\r\n        autoComplete={props.autoComplete}\r\n      />\r\n      {error && (\r\n        <p className='error'>{error}</p>\r\n      ) }\r\n    </div>\r\n  );\r\n});\r\nInputField.defaultProps = {\r\n  placeholder: \"\",\r\n  name: \"\",\r\n  type: \"\",\r\n  value: \"\",\r\n  autoComplete: \"off\",\r\n  validation:\"\"\r\n};\r\n\r\nexport default InputField;\r\n","import React from \"react\";\n//Import the useState and InputField\n\nimport { useState } from \"react\";\nimport \"./App.css\";\nimport InputField from \"./components/InputField\";\n// Create the Function.\n//Initialize the Data variable by using the useState.\n// Create a handleChange Functions assigning the name and the value .\n// Create the submitForm function and pass in the event, and also use the if statement for validation.\nfunction App() {\n  const inputRefs = React.useRef([React.createRef()]);\n\n  const [data, setData] = useState({});\n  const handleChange = (name, value) => {\n    setData((prev) => ({ ...prev, [name]: value }));\n  };\n\n  const submitForm = (e) => {\n    e.preventDefault();\n\n    let isValid = true;\n    for (let i = 0; i < inputRefs.current.length; i++) {\n      const valid = inputRefs.current[i].current.validate();\n      console.log(valid)\n      if (!valid) {\n        isValid = false;\n        \n      }\n    }\n    if (!isValid) {\n      return;\n    }\n      console.log('loggged in')\n    //Carry on as normal\n  };\n  return (\n    <div className=\"App\">\n      <form onSubmit={submitForm} className='form'>\n        <h1>React Register Form Validation</h1>\n        <InputField\n          ref={inputRefs.current[0]}\n          name=\"username\"\n          label=\"Username:\"\n          onChange={handleChange}\n          validation={'required|min:6|max:12'}\n\n        />\n        <InputField\n          ref={inputRefs.current[1]}\n          name=\"password\"\n          label=\"Password:\"\n          onChange={handleChange}\n        />\n        <button type=\"submit\">Submit</button>\n      </form>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}